version: '3.9'

services:
  db:
    image: postgis/postgis:13-3.3 
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # For AMQP protocol
      - "15672:15672" # For Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: fastapi_api
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db/mydatabase
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - ./api:/app
      - ./frontend:/app/frontend

  taxonomy_worker:
    build:
      context: .
      dockerfile: workers/Dockerfile.workers
    container_name: taxonomy_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://user:password@db/mydatabase
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - ./workers:/app/workers

  otolith_worker:
    build:
      context: .
      dockerfile: workers/Dockerfile.workers
    container_name: otolith_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - ./workers:/app/workers

  edna_worker:
    build:
      context: .
      dockerfile: workers/Dockerfile.workers
    container_name: edna_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - ./workers:/app/workers

volumes:
  postgres_data:
