services:
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: rabbitmq-final
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - cmlre_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  db:
    image: postgres:15-alpine
    container_name: postgres-final
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cmlre_data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_final:/var/lib/postgresql/data
    networks:
      - cmlre_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cmlre_data"]
      interval: 5s
      timeout: 5s
      retries: 10

  model-builder:
    build:
      context: .
      dockerfile: ai_model/Dockerfile
    container_name: model-builder-final
    volumes:
      - model_volume_final:/app/ai_model
    networks:
      - cmlre_net
    command: python train_model.py

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: api-final
    command: uvicorn main_final:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
    networks:
      - cmlre_net
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  otolith_worker:
    build:
      context: .
      dockerfile: workers/Dockerfile
    container_name: otolith-worker-final
    command: python otolith_worker_ai.py
    networks:
      - cmlre_net
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  ai_worker:
    build:
      context: .
      dockerfile: workers/Dockerfile
    container_name: ai-worker-final
    command: python ai_worker.py
    volumes:
      - model_volume_final:/app/ai_model
    networks:
      - cmlre_net
    depends_on:
      model-builder:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-final
    ports:
      - "8082:80"
    networks:
      - cmlre_net
    depends_on:
      - api

networks:
  cmlre_net:
    driver: bridge

volumes:
  postgres_data_final:
  model_volume_final:

